{
  "$ref": "#/definitions/TDocumentDefinitions",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Alignment": {
      "description": "Available horizontal alignment options.",
      "enum": [
        "left",
        "right",
        "justify",
        "center"
      ],
      "type": "string"
    },
    "CanvasElement": {
      "anyOf": [
        {
          "$ref": "#/definitions/CanvasRect"
        },
        {
          "$ref": "#/definitions/CanvasPolyline"
        },
        {
          "$ref": "#/definitions/CanvasLine"
        },
        {
          "$ref": "#/definitions/CanvasEllipse"
        }
      ],
      "description": "Child elements of a  {@link  ContentCanvas } ."
    },
    "CanvasEllipse": {
      "additionalProperties": false,
      "description": "An ellipse or circle as part of a  {@link  ContentCanvas } .",
      "properties": {
        "color": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color the element is filled with.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo fill the element with a gradient, use  {@link  linearGradient }  instead."
        },
        "dash": {
          "$ref": "#/definitions/Dash",
          "description": "Makes the line dashed.\n\nDefaults to a solid line."
        },
        "fillOpacity": {
          "description": "Opacity of the  {@link  color }  or  {@link  linearGradient } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "lineColor": {
          "description": "Line color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black` if the element has no `color` set; defaults to no line otherwise.",
          "type": "string"
        },
        "lineJoin": {
          "$ref": "#/definitions/CanvasLineJoin",
          "description": "Rendering of joints between lines of different angles.\n\nDefaults to `miter`."
        },
        "lineWidth": {
          "description": "Line width in `pt`.\n\nDefaults to `1`.",
          "type": "number"
        },
        "linearGradient": {
          "description": "Linear horizontal gradient the element is filled with.\n\nThe given stops are distributed equally from left to right.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nTo fill the element with a solid color, use  {@link  color }  instead.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "r1": {
          "description": "Horizontal radius in `pt`.",
          "type": "number"
        },
        "r2": {
          "description": "Vertical radius in `pt`.\n\nDefaults to the same value as  {@link  r1 } .",
          "type": "number"
        },
        "strokeOpacity": {
          "description": "Opacity of the  {@link  lineColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "type": {
          "const": "ellipse",
          "type": "string"
        },
        "x": {
          "description": "Horizontal position from the left edge of the canvas element in `pt`.",
          "type": "number"
        },
        "y": {
          "description": "Vertical position from the top edge of the canvas element in `pt`.",
          "type": "number"
        }
      },
      "required": [
        "type",
        "x",
        "y",
        "r1"
      ],
      "type": "object"
    },
    "CanvasLine": {
      "additionalProperties": false,
      "description": "A simple line as part of a  {@link  ContentCanvas } .",
      "properties": {
        "dash": {
          "$ref": "#/definitions/Dash",
          "description": "Makes the line dashed.\n\nDefaults to a solid line."
        },
        "lineCap": {
          "$ref": "#/definitions/CanvasLineCap",
          "description": "Line end type.\n\nDefaults to `butt`."
        },
        "lineColor": {
          "description": "Line color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black` if the element has no `color` set; defaults to no line otherwise.",
          "type": "string"
        },
        "lineJoin": {
          "$ref": "#/definitions/CanvasLineJoin",
          "description": "Rendering of joints between lines of different angles.\n\nDefaults to `miter`."
        },
        "lineWidth": {
          "description": "Line width in `pt`.\n\nDefaults to `1`.",
          "type": "number"
        },
        "strokeOpacity": {
          "description": "Opacity of the  {@link  lineColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "type": {
          "const": "line",
          "type": "string"
        },
        "x1": {
          "description": "Horizontal line start position from the left in `pt`.",
          "type": "number"
        },
        "x2": {
          "description": "Horizontal line end position from the left in `pt`.",
          "type": "number"
        },
        "y1": {
          "description": "Vertical line start position from the top in `pt`.",
          "type": "number"
        },
        "y2": {
          "description": "Vertical line end position from the top in `pt`.",
          "type": "number"
        }
      },
      "required": [
        "type",
        "x1",
        "y1",
        "x2",
        "y2"
      ],
      "type": "object"
    },
    "CanvasLineCap": {
      "description": "Type to render the ends of lines in a canvas:\n- `butt` renders a short square line end\n- `square` renders a long square line end\n- `round` renders a long round line end",
      "enum": [
        "butt",
        "round",
        "square"
      ],
      "type": "string"
    },
    "CanvasLineJoin": {
      "description": "Type to render joints between lines of different angles in a canvas:\n- `miter` renders sharp edges\n- `round` renders round edges\n- `bevel` adds diagonal edges",
      "enum": [
        "miter",
        "round",
        "bevel"
      ],
      "type": "string"
    },
    "CanvasPolyline": {
      "additionalProperties": false,
      "description": "A line or shape consisting of multiple points as part of a  {@link  ContentCanvas } .",
      "properties": {
        "closePath": {
          "description": "Controls whether to draw a line between the last and the first specified  {@link  points } .\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "color": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color the element is filled with.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo fill the element with a gradient, use  {@link  linearGradient }  instead."
        },
        "dash": {
          "$ref": "#/definitions/Dash",
          "description": "Makes the line dashed.\n\nDefaults to a solid line."
        },
        "fillOpacity": {
          "description": "Opacity of the  {@link  color }  or  {@link  linearGradient } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "lineCap": {
          "$ref": "#/definitions/CanvasLineCap",
          "description": "Line end type.\n\nDefaults to `butt`."
        },
        "lineColor": {
          "description": "Line color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black` if the element has no `color` set; defaults to no line otherwise.",
          "type": "string"
        },
        "lineJoin": {
          "$ref": "#/definitions/CanvasLineJoin",
          "description": "Rendering of joints between lines of different angles.\n\nDefaults to `miter`."
        },
        "lineWidth": {
          "description": "Line width in `pt`.\n\nDefaults to `1`.",
          "type": "number"
        },
        "linearGradient": {
          "description": "Linear horizontal gradient the element is filled with.\n\nThe given stops are distributed equally from left to right.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nTo fill the element with a solid color, use  {@link  color }  instead.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "points": {
          "description": "The points that make up the line.",
          "items": {
            "$ref": "#/definitions/Point"
          },
          "type": "array"
        },
        "strokeOpacity": {
          "description": "Opacity of the  {@link  lineColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "type": {
          "const": "polyline",
          "type": "string"
        }
      },
      "required": [
        "type",
        "points"
      ],
      "type": "object"
    },
    "CanvasRect": {
      "additionalProperties": false,
      "description": "A rectangle as part of a  {@link  ContentCanvas } .",
      "properties": {
        "color": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color the element is filled with.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo fill the element with a gradient, use  {@link  linearGradient }  instead."
        },
        "dash": {
          "$ref": "#/definitions/Dash",
          "description": "Makes the line dashed.\n\nDefaults to a solid line."
        },
        "fillOpacity": {
          "description": "Opacity of the  {@link  color }  or  {@link  linearGradient } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "h": {
          "description": "Height in `pt`.",
          "type": "number"
        },
        "lineColor": {
          "description": "Line color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black` if the element has no `color` set; defaults to no line otherwise.",
          "type": "string"
        },
        "lineJoin": {
          "$ref": "#/definitions/CanvasLineJoin",
          "description": "Rendering of joints between lines of different angles.\n\nDefaults to `miter`."
        },
        "lineWidth": {
          "description": "Line width in `pt`.\n\nDefaults to `1`.",
          "type": "number"
        },
        "linearGradient": {
          "description": "Linear horizontal gradient the element is filled with.\n\nThe given stops are distributed equally from left to right.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nTo fill the element with a solid color, use  {@link  color }  instead.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "r": {
          "description": "Corner radius in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "strokeOpacity": {
          "description": "Opacity of the  {@link  lineColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "type": {
          "const": "rect",
          "type": "string"
        },
        "w": {
          "description": "Width in `pt`.",
          "type": "number"
        },
        "x": {
          "description": "Horizontal position from the left edge of the canvas element in `pt`.",
          "type": "number"
        },
        "y": {
          "description": "Vertical position from the top of the canvas element in `pt`.",
          "type": "number"
        }
      },
      "required": [
        "type",
        "x",
        "y",
        "w",
        "h"
      ],
      "type": "object"
    },
    "Column": {
      "description": "Column used as part of  {@link  ContentColumns } .",
      "properties": {
        "width": {
          "$ref": "#/definitions/Size",
          "description": "Column width.\n\nDefaults to `*`."
        }
      },
      "type": "object"
    },
    "Content": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "items": {
            "$ref": "#/definitions/Content"
          },
          "type": "array"
        },
        {
          "$ref": "#/definitions/ContentText"
        },
        {
          "$ref": "#/definitions/ContentColumns"
        },
        {
          "$ref": "#/definitions/ContentStack"
        },
        {
          "$ref": "#/definitions/ContentUnorderedList"
        },
        {
          "$ref": "#/definitions/ContentOrderedList"
        },
        {
          "$ref": "#/definitions/ContentTable"
        },
        {
          "$ref": "#/definitions/ContentAnchor"
        },
        {
          "$ref": "#/definitions/ContentPageReference"
        },
        {
          "$ref": "#/definitions/ContentTextReference"
        },
        {
          "$ref": "#/definitions/ContentToc"
        },
        {
          "$ref": "#/definitions/ContentTocItem"
        },
        {
          "$ref": "#/definitions/ContentImage"
        },
        {
          "$ref": "#/definitions/ContentSvg"
        },
        {
          "$ref": "#/definitions/ContentQr"
        },
        {
          "$ref": "#/definitions/ContentCanvas"
        }
      ],
      "description": "Common type for all available content elements.\n\nSpecial content types:\n- A string is rendered like a  {@link  ContentText } \n- An array is rendered like a  {@link  ContentStack }"
    },
    "ContentAnchor": {
      "additionalProperties": false,
      "description": "Anchor text element that can be referenced by cross references or used in a table of contents.\n\nAnchors can contain text content only.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "id": {
          "description": "ID of the anchor that can be used to reference it.\n\nIDs must be unique within the document.",
          "type": "string"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "text": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/ContentAnchor"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/ContentAnchor"
                  }
                ]
              },
              "type": "array"
            }
          ],
          "description": "Text content of the anchor."
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "text",
        "id"
      ],
      "type": "object"
    },
    "ContentCanvas": {
      "additionalProperties": false,
      "description": "Canvas / vector element.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "canvas": {
          "description": "Renders the given vector elements on a canvas.\n\nComplex vectors can be rendered from an SVG image using the `svg` property instead.",
          "items": {
            "$ref": "#/definitions/CanvasElement"
          },
          "type": "array"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "canvas"
      ],
      "type": "object"
    },
    "ContentColumns": {
      "additionalProperties": false,
      "description": "Element that divides its children into multiple columns.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "columns": {
          "description": "Divides the given elements into multiple columns.",
          "items": {
            "$ref": "#/definitions/Column"
          },
          "type": "array"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "columns"
      ],
      "type": "object"
    },
    "ContentImage": {
      "additionalProperties": false,
      "description": "Raster image element.\n\nFor SVG images, use a  {@link  ContentSvg }  element instead.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "cover": {
          "$ref": "#/definitions/ImageCover",
          "description": "Container to completely cover with an image, possibly cutting it off horizontally or vertically."
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "fit": {
          "description": "Box the image is scaled to fit inside, preserving its aspect ratio.\n\nThe image only occupies the space of its own size after scaling, even if one side of the box is larger.\n\nTuple elements: `[width, height]`.",
          "items": {
            "type": "number"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "height": {
          "description": "Height of the image in `pt`.\n\nIf a  {@link  width }  is given as well, the image is stretched to the given dimensions without preserving its aspect ratio. To prevent this behavior, either specify only one of the two properties, or use  {@link  fit }  instead.\n\nDefaults to the image's native height, or scales it down proportionally if a  {@link  width }  is given.",
          "type": "number"
        },
        "image": {
          "description": "Renders the given value as image.\n\nAvailable options:\n- A reference by name to an image defined in  {@link  TDocumentDefinitions.images } \n- A data URL\n- A remote URL via http:// or https://\n\nSupported image formats: JPEG, PNG\n\nFor SVG images, use the `svg` property instead.",
          "type": "string"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "link": {
          "description": "URL to open when the element is clicked on.\n\nUse in combination with a `text` or `image` property.",
          "type": "string"
        },
        "linkToDestination": {
          "description": "`id` of an element to jump to when the element is clicked on.\n\nUse in combination with a `text` or `image` property.\n\n- To display the target element's content, use `textReference` instead.\n- To display the target element's page number, use `pageReference` instead.\n\nTo link to a fixed page number (without a reference target), use `linkToPage` instead.",
          "type": "string"
        },
        "linkToPage": {
          "description": "Page to jump to when the element is clicked on.\n\nUse in combination with a `text` or `image` property.\n\nTo link to another element, use  {@link  linkToDestination } , `textReference` or `pageReference` instead.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "width": {
          "description": "Width of the image in `pt`.\n\nIf a  {@link  height }  is given as well, the image is stretched to the given dimensions without preserving its aspect ratio. To prevent this behavior, either specify only one of the two properties, or use  {@link  fit }  instead.\n\nDefaults to the image's native width, or scales it down proportionally if a  {@link  height }  is given.",
          "type": "number"
        }
      },
      "required": [
        "image"
      ],
      "type": "object"
    },
    "ContentOrderedList": {
      "additionalProperties": false,
      "description": "Element that renders an ordered / numbered list.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "ol": {
          "description": "Renders the given elements as an ordered / numbered list.",
          "items": {
            "$ref": "#/definitions/OrderedListElement"
          },
          "type": "array"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "reversed": {
          "description": "Controls whether the markers should be rendered in descending order.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "separator": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "type": "string"
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          ],
          "description": "Separator between the list markers and the list item content.\n\n- A string is inserted after the marker\n- A tuple of two strings is inserted before and after the marker\n\nDefaults to `.`"
        },
        "start": {
          "description": "Number of the first marker.\n\nFor a non-decimal  {@link  type } , the number is mapped to the corresponding marker string (e.g. `1` => `A` for `upper-alpha`).\n\nDefaults to `1`, or the number of items if  {@link  reversed }  is set.",
          "type": "number"
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/OrderedListType",
          "description": "List marker type determining the numbering scheme, such as decimal, alphabetic, or Roman.\n\nDefaults to `decimal`."
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "ol"
      ],
      "type": "object"
    },
    "ContentPageReference": {
      "additionalProperties": false,
      "description": "Reference to an anchor element, displaying its page number.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "pageReference": {
          "description": "`id` of a  {@link  ContentAnchor }  to reference.\n\nDisplays the target element's page number.\n- To display the element's text content, use `textReference` instead.\n- To display arbitrary content, use `linkToDestination` instead.\n\nTo link to a fixed page number (without a reference target), use `linkToPage` instead.",
          "type": "string"
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "pageReference"
      ],
      "type": "object"
    },
    "ContentQr": {
      "additionalProperties": false,
      "description": "QR code element.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "description": "Background color of the QR code.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `white`.",
          "type": "string"
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "eccLevel": {
          "description": "QR code error correction level that controls how many errors can be corrected.\n\nPossible values:\n- `L` = low (7%)\n- `M` = medium (15%)\n- `Q` = quartile (25%)\n- `H` = high (30%)\n\nDefaults to `L`.",
          "enum": [
            "L",
            "M",
            "Q",
            "H"
          ],
          "type": "string"
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "fit": {
          "description": "Size in `pt` to fit the QR code in.\n\nAs QR codes are square, this essentially sets both the width and height.\n\nDefaults to a heuristic depending on the pixel size of the QR code (see  {@link  version } ) so that every pixel is `5pt` large.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "foreground": {
          "description": "Foreground color of the QR code.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "mask": {
          "description": "QR code mask pattern from 0-7.\n\nDefaults to choosing a mask based on the given  {@link  qr }  data that tries to avoid problematic patterns in the resulting QR code.",
          "type": "number"
        },
        "mode": {
          "description": "QR code encoding mode.\n\nDefaults to the mode that produces the smallest payload for the given  {@link  qr }  data.",
          "enum": [
            "numeric",
            "alphanumeric",
            "octet"
          ],
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "padding": {
          "description": "Padding on all sides of the QR code, specified as multiples of the size of a QR code pixel.\n\nThe padding does not affect the size of the QR code itself, even if  {@link  fit }  is specified.\n\nDefaults to `0`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "qr": {
          "description": "Renders the given string as a QR code.",
          "type": "string"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "version": {
          "description": "QR code version.\n\nThe \"version\" of a QR code controls the number of its pixels and thus the maximum amount of data it can hold.\n\nPossible values are between 1 (21x21 pixels) and 40 (177x177 pixels).\n\nDefaults to the lowest possible version capable of holding the given  {@link  qr }  data with the specified  {@link  mode }  and  {@link  eccLevel } .",
          "type": "number"
        }
      },
      "required": [
        "qr"
      ],
      "type": "object"
    },
    "ContentStack": {
      "additionalProperties": false,
      "description": "Stack that renders its children as multiple paragraphs.\n\nFor simple stacks without properties, a content array can be used instead.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "stack": {
          "description": "Stack that renders the given elements as multiple paragraphs.\n\nFor simple stacks without properties, a content array can be used instead.",
          "items": {
            "$ref": "#/definitions/Content"
          },
          "type": "array"
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "stack"
      ],
      "type": "object"
    },
    "ContentSvg": {
      "additionalProperties": false,
      "description": "SVG image element.\n\nFor images other than SVG, use a  {@link  ContentImage }  instead.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "fit": {
          "description": "Box the image is scaled to fit inside, preserving its aspect ratio.\n\nThe image only occupies the space of its own size after scaling, even if one side of the box is larger.\n\nTuple elements: `[width, height]`.",
          "items": {
            "type": "number"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "height": {
          "description": "Height of the image in `pt`.\n\nUnlike JPEG or PNG images, SVG images always keep their aspect ratio. If the given height is larger than the image's height scaled to the given  {@link  width } , the image is centered vertically. To prevent this behavior, either specify only one of the two properties, or use  {@link  fit }  instead.\n\nDefaults to the SVG image's native height, or scales it down proportionally if a  {@link  width }  is given.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "svg": {
          "description": "Renders the given SVG content string as an image.\n\nFor images other than SVG, use the `image` property instead.\n\nSimple vectors can also be rendered using the `canvas` property instead.",
          "type": "string"
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "width": {
          "description": "Width of the image in `pt`.\n\nUnlike JPEG or PNG images, SVG images always keep their aspect ratio. If the given width is larger than the image's width scaled to the given  {@link  height } , the image is centered horizontally. To prevent this behavior, either specify only one of the two properties, or use  {@link  fit }  instead.\n\nDefaults to the SVG image's native width, or scales it down proportionally if a  {@link  height }  is given.",
          "type": "number"
        }
      },
      "required": [
        "svg"
      ],
      "type": "object"
    },
    "ContentTable": {
      "additionalProperties": false,
      "description": "Table element.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "layout": {
          "$ref": "#/definitions/TableLayout",
          "description": "Layout for the table, or a reference to a predefined or global layout.\n\nDefaults to a layout with black borders."
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "table": {
          "$ref": "#/definitions/Table",
          "description": "Renders a table.\n\nUse the  {@link  layout }  property to control its layout."
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "table"
      ],
      "type": "object"
    },
    "ContentText": {
      "additionalProperties": false,
      "description": "Text element.\n\nFor simple text without other properties, a string can be used instead of this element.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "link": {
          "description": "URL to open when the element is clicked on.\n\nUse in combination with a `text` or `image` property.",
          "type": "string"
        },
        "linkToDestination": {
          "description": "`id` of an element to jump to when the element is clicked on.\n\nUse in combination with a `text` or `image` property.\n\n- To display the target element's content, use `textReference` instead.\n- To display the target element's page number, use `pageReference` instead.\n\nTo link to a fixed page number (without a reference target), use `linkToPage` instead.",
          "type": "string"
        },
        "linkToPage": {
          "description": "Page to jump to when the element is clicked on.\n\nUse in combination with a `text` or `image` property.\n\nTo link to another element, use  {@link  linkToDestination } , `textReference` or `pageReference` instead.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "text": {
          "$ref": "#/definitions/Content",
          "description": "Text content.\n\nMakes its contents inline: Arrays are no longer rendered like  {@link  ContentStack }  below one another, but as inline text in a single paragraph."
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "text"
      ],
      "type": "object"
    },
    "ContentTextReference": {
      "additionalProperties": false,
      "description": "Reference to an anchor element, displaying its text content.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "textReference": {
          "description": "`id` of a  {@link  ContentAnchor }  to reference.\n\nDisplays the target element's text content.\n- To display its page number, use `pageReference` instead.\n- To display arbitrary content, use `linkToDestination` instead.",
          "type": "string"
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "textReference"
      ],
      "type": "object"
    },
    "ContentToc": {
      "additionalProperties": false,
      "description": "Table of contents element.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "toc": {
          "$ref": "#/definitions/TableOfContent",
          "description": "Renders a table of contents.\n\nOne document may contain more than one table of contents. In this case, you should assign each additional table of contents a unique `id`. This allows you to add items to it using the  {@link  ContentTocItem.tocItem }  property."
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "toc"
      ],
      "type": "object"
    },
    "ContentTocItem": {
      "additionalProperties": false,
      "description": "Text element to be displayed in a table of contents.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "text": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/ContentTocItem"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/ContentTocItem"
                  }
                ]
              },
              "type": "array"
            }
          ],
          "description": "Text content of the element.\n\nLimited to text only; other content cannot be rendered inside a table of contents."
        },
        "tocItem": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "items": {
                "type": [
                  "string",
                  "boolean"
                ]
              },
              "type": "array"
            }
          ],
          "description": "References to the tables of contents the element should be displayed in.\n\n- `true` will display the element in all  {@link  ContentToc }  elements that   do not have an `id` set\n- a string will display the element in the  {@link  ContentToc }  with matching `id`\n- an array will display the element in all  {@link  ContentToc }    elements with matching `id` properties (`true` for the default one   without an `id`)"
        },
        "tocMargin": {
          "$ref": "#/definitions/Margins",
          "description": "Margin that is applied to the reference for this element in the table of contents."
        },
        "tocNumberStyle": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference that is applied to the page number for this element in the table of contents."
        },
        "tocStyle": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference that is applied to the reference for this element in the table of contents."
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "text",
        "tocItem"
      ],
      "type": "object"
    },
    "ContentUnorderedList": {
      "additionalProperties": false,
      "description": "Element that renders an unordered / bulleted list element.",
      "properties": {
        "absolutePosition": {
          "$ref": "#/definitions/Position",
          "description": "Absolute position of the element from the top-left corner of the current page.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "headlineLevel": {
          "description": "Sets the headline level for the current element.\n\nThis value is not currently used by pdfmake itself. It is, however, passed to the  {@link  TDocumentDefinitions.pageBreakBefore }  callback, where you can use it to automatically insert page breaks before elements with certain headline levels.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "Controls whether to insert a page break before or after the element.\n\nFor more complex page break logic, use  {@link  TDocumentDefinitions.pageBreakBefore } ."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Sets the page orientation.\n\nOnly relevant when used in combination with  {@link  pageBreak } ."
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "relativePosition": {
          "$ref": "#/definitions/Position",
          "description": "Relative position of the element from the position it would normally be rendered in.\n\nIf set, the element does not occupy any space in the normal content layout.\n\nIn this case, the element is rendered above elements defined earlier in the document content, but below elements defined later."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply."
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/UnorderedListType",
          "description": "List marker type.\n\nDefaults to `disc`."
        },
        "ul": {
          "description": "Renders the given elements as an unordered / bulleted list.",
          "items": {
            "$ref": "#/definitions/UnorderedListElement"
          },
          "type": "array"
        },
        "unbreakable": {
          "description": "Controls whether the element should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "ul"
      ],
      "type": "object"
    },
    "ContextPageSize": {
      "additionalProperties": false,
      "description": "Information about the effective page size.",
      "properties": {
        "height": {
          "description": "Page height in `pt`.",
          "type": "number"
        },
        "orientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Page orientation."
        },
        "width": {
          "description": "Page width in `pt`.",
          "type": "number"
        }
      },
      "required": [
        "height",
        "width",
        "orientation"
      ],
      "type": "object"
    },
    "CustomPageSize": {
      "additionalProperties": false,
      "description": "A page size using custom dimensions.",
      "properties": {
        "height": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "const": "auto",
              "type": "string"
            }
          ],
          "description": "Page height in `pt`, or `auto` to adapt the page height to the document's content (the document will always have a single page)."
        },
        "width": {
          "description": "Page width in `pt`.",
          "type": "number"
        }
      },
      "required": [
        "width",
        "height"
      ],
      "type": "object"
    },
    "CustomTableLayout": {
      "additionalProperties": false,
      "description": "Custom layout to control borders, cell padding, and cell background of a table.",
      "properties": {
        "defaultBorder": {
          "description": "Controls whether the table has any borders by default.\n\nIf set to `false`, borders can only be added to cells via their `border` property.\n\nDefaults to `true`.",
          "type": "boolean"
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            },
            {
              "$ref": "#/definitions/DynamicCellLayout%3C(string%7CPatternFill)%3E"
            }
          ],
          "description": "Background color the table's cells are filled with.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern."
        },
        "fillOpacity": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "$ref": "#/definitions/DynamicCellLayout%3Cnumber%3E"
            }
          ],
          "description": "Opacity of the  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`."
        },
        "hLineColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/DynamicCellLayout%3Cstring%3E"
            }
          ],
          "description": "Color of horizontal lines, optionally depending on the row (0 = line above the top row) and column number (0 = left-most column).\n\nCan be overridden for each cell via  {@link  TableCellProperties.borderColor } .\n\nDefaults to `black`."
        },
        "hLineStyle": {
          "$ref": "#/definitions/DynamicLayout%3CLineStyle%3E",
          "description": "Style of horizontal lines depending on the row number (0 = line above the top row).\n\n**Note**: Does not allow an explicit value of `undefined`.\n\nDefaults to a solid line."
        },
        "hLineWidth": {
          "$ref": "#/definitions/DynamicLayout%3Cnumber%3E",
          "description": "Width of horizontal lines in `pt` depending on the row number (0 = line above the first row).\n\n**Note**: Does not allow an explicit value of `undefined`.\n\nDefaults to `1`."
        },
        "paddingBottom": {
          "$ref": "#/definitions/DynamicLayout%3Cnumber%3E",
          "description": "Padding in `pt` at the bottom of each cell of a row (0 = top row).\n\n**Note**: Does not allow an explicit value of `undefined`.\n\nDefaults to `2`."
        },
        "paddingLeft": {
          "$ref": "#/definitions/VerticalDynamicLayout%3Cnumber%3E",
          "description": "Padding in `pt` to the left of each column (0 = left-most column).\n\n**Note**: Does not allow an explicit value of `undefined`.\n\nDefaults to `4`."
        },
        "paddingRight": {
          "$ref": "#/definitions/VerticalDynamicLayout%3Cnumber%3E",
          "description": "Padding in `pt` to the right of each column (0 = left-most column).\n\n**Note**: Does not allow an explicit value of `undefined`.\n\nDefaults to `4`."
        },
        "paddingTop": {
          "$ref": "#/definitions/DynamicLayout%3Cnumber%3E",
          "description": "Padding in `pt` at the top of each cell of a row (0 = top row).\n\n**Note**: Does not allow an explicit value of `undefined`.\n\nDefaults to `2`."
        },
        "vLineColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/VerticalDynamicCellLayout%3Cstring%3E"
            }
          ],
          "description": "Color of vertical lines, optionally depending on the column (0 = line left of the left-most column) and row number (0 = top row).\n\nCan be overridden for each cell via  {@link  TableCellProperties.borderColor } .\n\nDefaults to `black`."
        },
        "vLineStyle": {
          "$ref": "#/definitions/VerticalDynamicLayout%3CLineStyle%3E",
          "description": "Style of vertical lines depending on the column number (0 = line to the left of the left-most column).\n\n**Note**: Does not allow an explicit value of `undefined`.\n\nDefaults to a solid line."
        },
        "vLineWidth": {
          "$ref": "#/definitions/VerticalDynamicLayout%3Cnumber%3E",
          "description": "Width of vertical lines in `pt` depending on the column number (0 = line to the left of the left-most column).\n\n**Note**: Does not allow an explicit value of `undefined`.\n\nDefaults to `1`."
        }
      },
      "type": "object"
    },
    "Dash": {
      "additionalProperties": false,
      "description": "Style of a dashed line.",
      "properties": {
        "length": {
          "description": "Length of each dash in `pt`.",
          "type": "number"
        },
        "space": {
          "description": "Space between dashes in `pt`.\n\nDefaults to the same value as  {@link  length } .",
          "type": "number"
        }
      },
      "required": [
        "length"
      ],
      "type": "object"
    },
    "Decoration": {
      "description": "Available types of decorations. Can be combined with a  {@link  DecorationStyle } .",
      "enum": [
        "underline",
        "lineThrough",
        "overline"
      ],
      "type": "string"
    },
    "DecorationStyle": {
      "description": "Available  {@link  Decoration }  styles.",
      "enum": [
        "solid",
        "dashed",
        "dotted",
        "double",
        "wavy"
      ],
      "type": "string"
    },
    "DynamicBackground": {
      "$comment": "(currentPage: number, pageSize: ContextPageSize) => Content | null | undefined",
      "description": "Callback that returns content depending on the current page number or the size of the current page.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "currentPage": {
              "type": "number"
            },
            "pageSize": {
              "$ref": "#/definitions/ContextPageSize"
            }
          },
          "required": [
            "currentPage",
            "pageSize"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "DynamicCellLayout<(string|PatternFill)>": {
      "$comment": "(\n    rowIndex: number,\n    node: ContentTable,\n    columnIndex: number) => T | null",
      "description": "Callback to control a property of the  {@link  CustomTableLayout }  depending on the row and column number, both starting from 0.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "columnIndex": {
              "type": "number"
            },
            "node": {
              "$ref": "#/definitions/ContentTable"
            },
            "rowIndex": {
              "type": "number"
            }
          },
          "required": [
            "rowIndex",
            "node",
            "columnIndex"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "DynamicCellLayout<number>": {
      "$comment": "(\n    rowIndex: number,\n    node: ContentTable,\n    columnIndex: number) => T | null",
      "description": "Callback to control a property of the  {@link  CustomTableLayout }  depending on the row and column number, both starting from 0.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "columnIndex": {
              "type": "number"
            },
            "node": {
              "$ref": "#/definitions/ContentTable"
            },
            "rowIndex": {
              "type": "number"
            }
          },
          "required": [
            "rowIndex",
            "node",
            "columnIndex"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "DynamicCellLayout<string>": {
      "$comment": "(\n    rowIndex: number,\n    node: ContentTable,\n    columnIndex: number) => T | null",
      "description": "Callback to control a property of the  {@link  CustomTableLayout }  depending on the row and column number, both starting from 0.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "columnIndex": {
              "type": "number"
            },
            "node": {
              "$ref": "#/definitions/ContentTable"
            },
            "rowIndex": {
              "type": "number"
            }
          },
          "required": [
            "rowIndex",
            "node",
            "columnIndex"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "DynamicContent": {
      "$comment": "(\n    currentPage: number,\n    pageCount: number,\n    pageSize: ContextPageSize) => Content | null | undefined",
      "description": "Callback that returns content depending on the current page number, the total number of pages, or the size of the current page.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "currentPage": {
              "type": "number"
            },
            "pageCount": {
              "type": "number"
            },
            "pageSize": {
              "$ref": "#/definitions/ContextPageSize"
            }
          },
          "required": [
            "currentPage",
            "pageCount",
            "pageSize"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "DynamicLayout<LineStyle>": {
      "$comment": "(rowIndex: number, node: ContentTable) => T | null",
      "description": "Callback to control a property of the  {@link  CustomTableLayout }  depending on the row number, starting from 0.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "node": {
              "$ref": "#/definitions/ContentTable"
            },
            "rowIndex": {
              "type": "number"
            }
          },
          "required": [
            "rowIndex",
            "node"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "DynamicLayout<number>": {
      "$comment": "(rowIndex: number, node: ContentTable) => T | null",
      "description": "Callback to control a property of the  {@link  CustomTableLayout }  depending on the row number, starting from 0.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "node": {
              "$ref": "#/definitions/ContentTable"
            },
            "rowIndex": {
              "type": "number"
            }
          },
          "required": [
            "rowIndex",
            "node"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "DynamicRowSize": {
      "$comment": "(rowIndex: number) => number | \"auto\"",
      "description": "Callback to define a height in `pt` for a table row based on its row number (starting from 0).\n\n`auto` sets the height based on the row's content.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "rowIndex": {
              "type": "number"
            }
          },
          "required": [
            "rowIndex"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "ImageAlignment": {
      "description": "Horizontal image alignment within its container.",
      "enum": [
        "left",
        "right",
        "center"
      ],
      "type": "string"
    },
    "ImageCover": {
      "additionalProperties": false,
      "description": "Container to completely cover with an image, possibly cutting it off horizontally or vertically.",
      "properties": {
        "align": {
          "$ref": "#/definitions/ImageAlignment",
          "description": "Horizontal alignment of the image inside the cover container if it is wider.\n\nDefaults to `center`."
        },
        "height": {
          "description": "Container height in `pt`.\n\nDefaults to the image's (specified or native) width.",
          "type": "number"
        },
        "valign": {
          "$ref": "#/definitions/ImageVerticalAlignment",
          "description": "Vertical alignment of the image inside the cover container if it is higher.\n\nDefaults to `center`."
        },
        "width": {
          "description": "Container width in `pt`.\n\nDefaults to the image's (specified or native) width.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ImageDefinition": {
      "additionalProperties": false,
      "description": "Definition of an image to be embedded into the document.",
      "properties": {
        "headers": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "HTTP headers to include in the image request, if  {@link  url }  is a remote URL.",
          "type": "object"
        },
        "url": {
          "description": "Image URL.\n\nAvailable options:\n- Data URLs\n- Remote URLs via http:// or https://\n\nSupported image formats: JPEG, PNG\n\nSVG images can only be used in the document content using the `svg` property.",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "ImageVerticalAlignment": {
      "description": "Vertical image alignment within its container.",
      "enum": [
        "top",
        "bottom",
        "center"
      ],
      "type": "string"
    },
    "Margins": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "items": {
            "type": "number"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        {
          "items": {
            "type": "number"
          },
          "maxItems": 4,
          "minItems": 4,
          "type": "array"
        }
      ],
      "description": "Margin in `pt`. Allows\n- a single number which applies the same margin on all sides\n- a tuple of two values `[horizontal, vertical]`\n- a tuple of four values `[left, top, right, bottom]`\n\nMargins of adjacent elements do not collapse.\n\nNegative values can lead to elements overlapping each other."
    },
    "Node": {
      "additionalProperties": false,
      "description": "Information about a node that is being rendered.",
      "properties": {
        "canvas": {
          "description": "Canvas / vector elements.",
          "items": {
            "$ref": "#/definitions/CanvasElement"
          },
          "type": "array"
        },
        "columns": {
          "description": "Column elements.",
          "items": {
            "$ref": "#/definitions/Column"
          },
          "type": "array"
        },
        "headlineLevel": {
          "description": "Headline level specified on the node's content element.",
          "type": "number"
        },
        "id": {
          "description": "The node's ID.",
          "type": "string"
        },
        "image": {
          "description": "Image URL or reference.",
          "type": "string"
        },
        "ol": {
          "description": "Ordered list elements.",
          "items": {
            "$ref": "#/definitions/OrderedListElement"
          },
          "type": "array"
        },
        "pageBreak": {
          "$ref": "#/definitions/PageBreak",
          "description": "The node's specified page break."
        },
        "pageNumbers": {
          "description": "Array containing all page numbers (starting from 1) the node spans across.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Page orientation at the node's start position."
        },
        "pages": {
          "description": "Total number of pages in the document.",
          "type": "number"
        },
        "qr": {
          "description": "QR code content.",
          "type": "string"
        },
        "stack": {
          "description": "Indicates whether the node is a  {@link  ContentStack } .",
          "type": "boolean"
        },
        "startPosition": {
          "$ref": "#/definitions/NodeStartPosition",
          "description": "Start position of the node."
        },
        "style": {
          "$ref": "#/definitions/StyleReference",
          "description": "Styles or style references applied to the node."
        },
        "svg": {
          "description": "SVG image content.",
          "type": "string"
        },
        "table": {
          "$ref": "#/definitions/Table",
          "description": "Table content."
        },
        "text": {
          "$ref": "#/definitions/Content",
          "description": "Text content."
        },
        "ul": {
          "description": "Unordered list elements.",
          "items": {
            "$ref": "#/definitions/UnorderedListElement"
          },
          "type": "array"
        }
      },
      "required": [
        "pageNumbers",
        "pages",
        "stack",
        "startPosition"
      ],
      "type": "object"
    },
    "NodeStartPosition": {
      "additionalProperties": false,
      "description": "Start position of a node in the document.",
      "properties": {
        "horizontalRatio": {
          "description": "Same as  {@link  left } , but as a relative value between the left and right page margin: 0 corresponds with the left page margin, 1 corresponds with the right page margin.",
          "type": "number"
        },
        "left": {
          "description": "Horizontal start position from the left edge of the page in `pt`.",
          "type": "number"
        },
        "pageInnerHeight": {
          "description": "Height of the page in `pt`, with the vertical page margins subtracted.",
          "type": "number"
        },
        "pageInnerWidth": {
          "description": "Width of the page in `pt`, with the horizontal page margins subtracted.",
          "type": "number"
        },
        "pageNumber": {
          "description": "Page number (starting from 1) the node starts on.",
          "type": "number"
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Orientation of the page the node starts on."
        },
        "top": {
          "description": "Vertical start position from the top of the page in `pt`.",
          "type": "number"
        },
        "verticalRatio": {
          "description": "Same as  {@link  top } , but as a relative value between the top and bottom page margin: 0 corresponds with the top page margin, 1 corresponds with the bottom page margin.",
          "type": "number"
        }
      },
      "required": [
        "pageNumber",
        "pageOrientation",
        "pageInnerHeight",
        "pageInnerWidth",
        "left",
        "top",
        "verticalRatio",
        "horizontalRatio"
      ],
      "type": "object"
    },
    "OrderedListElement": {
      "description": "Item of a  {@link  ContentOrderedList } .",
      "properties": {
        "counter": {
          "description": "Overrides the counter for this list item.\n\nFor a non-decimal  {@link  listType } , the number is mapped to the corresponding marker string (e.g. `1` => `A` for `upper-alpha`).\n\nDoes not influence the counters for the other list items.",
          "type": "number"
        },
        "listType": {
          "$ref": "#/definitions/OrderedListType",
          "description": "Overrides the list marker type for this list item.\n\nDefaults to the list's  {@link  ContentOrderedList.type } ."
        }
      },
      "type": "object"
    },
    "OrderedListType": {
      "description": "List marker type of a  {@link  ContentOrderedList } :\n- `decimal`: 1, 2, 3\n- `lower-alpha`: a, b, c\n- `upper-alpha`: A, B, C\n- `lower-roman`: i, ii, iii\n- `upper-roman`: I, II, III\n- `none`: no marker",
      "enum": [
        "decimal",
        "lower-alpha",
        "upper-alpha",
        "lower-roman",
        "upper-roman",
        "none"
      ],
      "type": "string"
    },
    "PDFKit.DocumentPermissions": {
      "additionalProperties": false,
      "properties": {
        "annotating": {
          "type": "boolean"
        },
        "contentAccessibility": {
          "type": "boolean"
        },
        "copying": {
          "type": "boolean"
        },
        "documentAssembly": {
          "type": "boolean"
        },
        "fillingForms": {
          "type": "boolean"
        },
        "modifying": {
          "type": "boolean"
        },
        "printing": {
          "enum": [
            "lowResolution",
            "highResolution"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PDFKit.Mixins.OpenTypeFeatures": {
      "enum": [
        "aalt",
        "abvf",
        "abvm",
        "abvs",
        "afrc",
        "akhn",
        "blwf",
        "blwm",
        "blws",
        "calt",
        "case",
        "cfar",
        "cjct",
        "clig",
        "cpct",
        "cpsp",
        "cswh",
        "curs",
        "cv01",
        "cv02",
        "cv03",
        "cv04",
        "cv05",
        "cv06",
        "cv07",
        "cv08",
        "cv09",
        "cv10",
        "cv11",
        "cv12",
        "cv13",
        "cv14",
        "cv15",
        "cv16",
        "cv17",
        "cv18",
        "cv19",
        "cv20",
        "cv21",
        "cv22",
        "cv23",
        "cv24",
        "cv25",
        "cv26",
        "cv27",
        "cv28",
        "cv29",
        "cv30",
        "cv31",
        "cv32",
        "cv33",
        "cv34",
        "cv35",
        "cv36",
        "cv37",
        "cv38",
        "cv39",
        "cv40",
        "cv41",
        "cv42",
        "cv43",
        "cv44",
        "cv45",
        "cv46",
        "cv47",
        "cv48",
        "cv49",
        "cv50",
        "cv51",
        "cv52",
        "cv53",
        "cv54",
        "cv55",
        "cv56",
        "cv57",
        "cv58",
        "cv59",
        "cv60",
        "cv61",
        "cv62",
        "cv63",
        "cv64",
        "cv65",
        "cv66",
        "cv67",
        "cv68",
        "cv69",
        "cv70",
        "cv71",
        "cv72",
        "cv73",
        "cv74",
        "cv75",
        "cv76",
        "cv77",
        "cv78",
        "cv79",
        "cv80",
        "cv81",
        "cv82",
        "cv83",
        "cv84",
        "cv85",
        "cv86",
        "cv87",
        "cv88",
        "cv89",
        "cv90",
        "cv91",
        "cv92",
        "cv93",
        "cv94",
        "cv95",
        "cv96",
        "cv97",
        "cv98",
        "cv99",
        "c2pc",
        "c2sc",
        "dist",
        "ccmp",
        "dlig",
        "dnom",
        "dtls",
        "expt",
        "falt",
        "fin2",
        "fin3",
        "fina",
        "flac",
        "frac",
        "fwid",
        "half",
        "haln",
        "halt",
        "hist",
        "hkna",
        "hlig",
        "hngl",
        "hojo",
        "hwid",
        "init",
        "isol",
        "ital",
        "jalt",
        "jp78",
        "jp83",
        "jp90",
        "jp04",
        "kern",
        "lfbd",
        "liga",
        "ljmo",
        "lnum",
        "locl",
        "ltra",
        "ltrm",
        "mark",
        "med2",
        "medi",
        "mgrk",
        "mkmk",
        "mset",
        "nalt",
        "nlck",
        "nukt",
        "numr",
        "onum",
        "opbd",
        "ordn",
        "ornm",
        "palt",
        "pcap",
        "pkna",
        "pnum",
        "pref",
        "pres",
        "pstf",
        "psts",
        "pwid",
        "qwid",
        "rand",
        "rclt",
        "rkrf",
        "rlig",
        "rphf",
        "rtbd",
        "rtla",
        "rtlm",
        "ruby",
        "rvrn",
        "salt",
        "sinf",
        "size",
        "smcp",
        "smpl",
        "ss01",
        "ss02",
        "ss03",
        "ss04",
        "ss05",
        "ss06",
        "ss07",
        "ss08",
        "ss09",
        "ss10",
        "ss11",
        "ss12",
        "ss13",
        "ss14",
        "ss15",
        "ss16",
        "ss17",
        "ss18",
        "ss19",
        "ss20",
        "ssty",
        "stch",
        "subs",
        "sups",
        "swsh",
        "titl",
        "tjmo",
        "tnam",
        "tnum",
        "trad",
        "twid",
        "unic",
        "valt",
        "vatu",
        "vert",
        "vhal",
        "vjmo",
        "vkna",
        "vkrn",
        "vpal",
        "vrt2",
        "vrtr",
        "zero"
      ],
      "type": "string"
    },
    "PDFVersion": {
      "description": "Supported PDF versions.",
      "enum": [
        "1.3",
        "1.4",
        "1.5",
        "1.6",
        "1.7",
        "1.7ext3"
      ],
      "type": "string"
    },
    "PageBreak": {
      "description": "Different types of page breaks:\n- `before`/`after` add a page break before or after an element\n- `beforeEven`/`afterEven` adds one or two page breaks before/after an element   so that the content after the page break is on an even page\n- `beforeOdd`/`afterOdd` adds one or two page breaks before/after an element   so that the content after the page break is on an odd page",
      "enum": [
        "before",
        "beforeEven",
        "beforeOdd",
        "after",
        "afterEven",
        "afterOdd"
      ],
      "type": "string"
    },
    "PageOrientation": {
      "description": "Orientation of a page:\n- `portrait` uses the shorter dimension as width and the longer one as height\n- `landscape` uses the longer dimension as width and the shorter one as height\n\nA page's orientation does not rotate its content; it is always rendered top to bottom.",
      "enum": [
        "portrait",
        "landscape"
      ],
      "type": "string"
    },
    "PageSize": {
      "anyOf": [
        {
          "$ref": "#/definitions/PredefinedPageSize"
        },
        {
          "$ref": "#/definitions/CustomPageSize"
        }
      ],
      "description": "Size of a page."
    },
    "Pattern": {
      "additionalProperties": false,
      "description": "PDF tiling pattern definition.",
      "properties": {
        "boundingBox": {
          "description": "Bounding box that defines the dimensions of the pattern in `pt`.",
          "items": {
            "type": "number"
          },
          "maxItems": 4,
          "minItems": 4,
          "type": "array"
        },
        "pattern": {
          "description": "PDF tiling pattern string.",
          "type": "string"
        },
        "xStep": {
          "description": "Horizontal step size in `pt`.",
          "type": "number"
        },
        "yStep": {
          "description": "Vertical step size in `pt`.",
          "type": "number"
        }
      },
      "required": [
        "boundingBox",
        "xStep",
        "yStep",
        "pattern"
      ],
      "type": "object"
    },
    "PatternFill": {
      "description": "Combination of a pattern defined in  {@link  TDocumentDefinitions.patterns }  and a color.\n\nTuple consisting of two elements:\n- The name of the pattern\n- The color to apply to the pattern.   Supports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.",
      "items": {
        "type": "string"
      },
      "maxItems": 2,
      "minItems": 2,
      "type": "array"
    },
    "Point": {
      "additionalProperties": false,
      "description": "Point of a  {@link  CanvasPolyline } .",
      "properties": {
        "x": {
          "description": "Horizontal position from the left edge of the canvas element in `pt`.",
          "type": "number"
        },
        "y": {
          "description": "Vertical position from the top of the canvas element in `pt`.",
          "type": "number"
        }
      },
      "required": [
        "x",
        "y"
      ],
      "type": "object"
    },
    "Position": {
      "additionalProperties": false,
      "description": "A position applied to an element.",
      "properties": {
        "x": {
          "description": "Horizontal position from the left edge of the page in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "y": {
          "description": "Vertical position from the top of the page in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "PredefinedPageSize": {
      "description": "Available predefined page sizes:\n- ISO 216 standard sizes (e.g. `A4`)\n- ISO 217 raw sizes (e.g. `RA4`)\n- American loose sizes (e.g. `TABLOID`)",
      "enum": [
        "4A0",
        "2A0",
        "A0",
        "A1",
        "A2",
        "A3",
        "A4",
        "A5",
        "A6",
        "A7",
        "A8",
        "A9",
        "A10",
        "B0",
        "B1",
        "B2",
        "B3",
        "B4",
        "B5",
        "B6",
        "B7",
        "B8",
        "B9",
        "B10",
        "C0",
        "C1",
        "C2",
        "C3",
        "C4",
        "C5",
        "C6",
        "C7",
        "C8",
        "C9",
        "C10",
        "RA1",
        "RA2",
        "RA3",
        "RA4",
        "SRA1",
        "SRA2",
        "SRA3",
        "SRA4",
        "EXECUTIVE",
        "FOLIO",
        "LEGAL",
        "LETTER",
        "TABLOID"
      ],
      "type": "string"
    },
    "PredefinedTableLayout": {
      "description": "Built-in predefined table layouts:\n- `noBorders` renders the table without borders and without horizontal padding for the left- and right-most cell\n- `headerLineOnly` only renders a horizontal border below the rows marked as header\n- `lightHorizontalLines` renders gray horizontal borders",
      "enum": [
        "noBorders",
        "headerLineOnly",
        "lightHorizontalLines"
      ],
      "type": "string"
    },
    "Size": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "const": "auto",
          "type": "string"
        },
        {
          "const": "*",
          "type": "string"
        },
        {
          "type": "string"
        }
      ],
      "description": "Sizes for the width of stand-alone columns and table columns.\n\nAvailable options are:\n- A number to define an absolute width in `pt`\n- A percentage string such as `50%` to fill a portion of the available space\n- `auto` to set the width based on the content\n- `*` to fill the remaining available space, distributed equally among   all star-sized columns"
    },
    "Style": {
      "additionalProperties": false,
      "description": "Style definition.\n\nMost properties are passed down to an element's children.\n\nThe properties can also be applied to element objects directly.",
      "properties": {
        "alignment": {
          "$ref": "#/definitions/Alignment",
          "description": "Text alignment.\n\nDefaults to `left`."
        },
        "background": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background color of the text.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nTo set the background of table cells, use  {@link  fillColor }  instead."
        },
        "bold": {
          "description": "Controls whether the text is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "characterSpacing": {
          "description": "Spacing between characters in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "color": {
          "description": "Text color.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "columnGap": {
          "description": "Space between columns in `pt`.\n\nOnly applies to  {@link  ContentColumns }  elements.\n\nDefaults to `0`.",
          "type": "number"
        },
        "decoration": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decoration"
            },
            {
              "items": {
                "$ref": "#/definitions/Decoration"
              },
              "type": "array"
            }
          ],
          "description": "Text decoration to apply."
        },
        "decorationColor": {
          "description": "Color to apply to the given  {@link  decoration } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "decorationStyle": {
          "$ref": "#/definitions/DecorationStyle",
          "description": "Style to apply to the given  {@link  decoration } .\n\nDefaults to `solid`."
        },
        "fillColor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/PatternFill"
            }
          ],
          "description": "Background fill color for table cells.\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`, as well as a reference to a pattern.\n\nOnly applies to  {@link  TableCell }  elements. For the background color of text, use  {@link  background }  instead."
        },
        "fillOpacity": {
          "description": "Opacity of the given  {@link  fillColor } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nOnly applies to  {@link  TableCell }  elements.\n\nDefaults to `1`.",
          "type": "number"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontFeatures": {
          "description": "OpenType font features to apply.",
          "items": {
            "$ref": "#/definitions/PDFKit.Mixins.OpenTypeFeatures"
          },
          "type": "array"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to `12`.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the text is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "leadingIndent": {
          "description": "Indent at the beginning of a paragraph in `pt`.\n\nDefaults to `0`.",
          "type": "number"
        },
        "lineHeight": {
          "description": "Line height as a factor of the  {@link  fontSize } .\n\nDefaults to `1`.",
          "type": "number"
        },
        "margin": {
          "$ref": "#/definitions/Margins",
          "description": "Margins to apply.\n\nOverrides the single-side `marginXXX` properties, unless this value is inherited from a style and they are set directly on the content object.\n\nIgnored for content within an inline text array (`{ text: [{ ... }] }`)."
        },
        "marginBottom": {
          "description": "Margin in `pt` to apply below the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginLeft": {
          "description": "Margin in `pt` to apply to the left of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginRight": {
          "description": "Margin in `pt` to apply to the right of the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "marginTop": {
          "description": "Margin in `pt` to apply above the content.\n\nIf  {@link  margin }  is set, this value is ignored, unless the margin was inherited from a style and the value is set directly on the content object.",
          "type": "number"
        },
        "markerColor": {
          "description": "Color of list markers (i.e. bullet points or numbers).\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the text's  {@link  color } .",
          "type": "string"
        },
        "noWrap": {
          "description": "Controls whether text paragraphs inside table cells should be rendered as a single line. If the column has a fixed width, long text lines will overflow the column; otherwise, the column will grow in width.\n\nOnly applies to  {@link  TableCell }  elements.\n\ndefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the content. Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
          "type": "number"
        },
        "preserveLeadingSpaces": {
          "description": "Controls whether to preserve spaces at the beginning of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "preserveTrailingSpaces": {
          "description": "Controls whether to preserve spaces at the end of a paragraph.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sub": {
          "description": "Controls whether the text is rendered as subscript.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "sup": {
          "description": "Controls whether the text is rendered as superscript.\n\nDefaults to `false`.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "StyleDictionary": {
      "additionalProperties": {
        "$ref": "#/definitions/Style"
      },
      "description": "Dictionary of reusable style definitions that can be referenced by their key.",
      "type": "object"
    },
    "StyleReference": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/Style"
        },
        {
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/Style"
              }
            ]
          },
          "type": "array"
        }
      ],
      "description": "Applies one or more styles.\n\n- A string references a named style from  {@link  TDocumentDefinitions.styles } \n- An object sets the given style properties\n- An array of strings or objects applies the styles in the given order,   later styles overriding properties from the earlier ones\n\nStyles defined this way can be overridden by the  {@link  Style }  properties on an element itself."
    },
    "TDocumentDefinitions": {
      "additionalProperties": false,
      "description": "Complete definition of a PDF document.",
      "properties": {
        "background": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicBackground"
            },
            {
              "$ref": "#/definitions/Content"
            }
          ],
          "description": "Content that is rendered behind the document's  {@link  content } , and repeated for every page.\n\nIndependent of the configured  {@link  pageMargins } ."
        },
        "compress": {
          "description": "Controls whether to compress the resulting PDF document.\n\nRegardless of this value, any image files added to the document are embedded without recompression. This flag merely applies a lossless compression (similar to ZIP compression) to the whole finished PDF document.\n\nTo control the size of the resulting PDF file and the quality of its images, optimize your image files before adding them:\n- For line art, try to find an SVG file, which often offers better quality at smaller file sizes.\n- Downscale large raster images to the smallest size that still looks good.\n- Use the file format (JPEG/PNG) and compression settings that yield the best compromise   between file size and quality.\n\nDefaults to `true`.",
          "type": "boolean"
        },
        "content": {
          "$ref": "#/definitions/Content",
          "description": "Main content of the document.\n\nRendered inside the configured  {@link  pageMargins } ."
        },
        "defaultStyle": {
          "$ref": "#/definitions/Style",
          "description": "Default styles that apply to the complete document."
        },
        "footer": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicContent"
            },
            {
              "$ref": "#/definitions/Content"
            }
          ],
          "description": "Footer content that is repeated on every page.\n\n**Note:** If the footer's content exceeds the available space as defined by  {@link  pageMargins } , it is not rendered at all."
        },
        "header": {
          "anyOf": [
            {
              "$ref": "#/definitions/DynamicContent"
            },
            {
              "$ref": "#/definitions/Content"
            }
          ],
          "description": "Header content that is repeated on every page.\n\n**Note:** If the header's content exceeds the available space as defined by  {@link  pageMargins } , it is not rendered at all."
        },
        "images": {
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/ImageDefinition"
              }
            ]
          },
          "description": "Dictionary of images to be embedded into the document.\n\nThe specified images can be referenced from content elements by their key.\n\nAvailable options:\n- A data URL\n- A remote URL via http:// or https://\n- An object including a URL and additional HTTP headers\n\nSupported image formats: JPEG, PNG\n\nSVG images can only be used in the document content using the `svg` property.",
          "type": "object"
        },
        "info": {
          "$ref": "#/definitions/TDocumentInformation",
          "description": "Metadata to embed into the document."
        },
        "language": {
          "description": "Document language as BCP 47 language tag, e.g. `en-US`.",
          "type": "string"
        },
        "ownerPassword": {
          "description": "Password required to get full access to the document.\n\nUse in combination with  {@link  permissions } .\n\nAn empty string is treated as \"no password\".\n\nDoes not encrypt the document; use  {@link  userPassword }  for that.",
          "type": "string"
        },
        "pageBreakBefore": {
          "$comment": "(\n            currentNode: Node,\n            followingNodesOnPage: Node[],\n            nodesOnNextPage: Node[],\n            previousNodesOnPage: Node[]) => boolean",
          "description": "Callback to determine where to break pages. Called repeatedly until no more page breaks are added.\n\nNot called for nodes that have `pageBreak: 'before'` set.",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "currentNode": {
                  "$ref": "#/definitions/Node"
                },
                "followingNodesOnPage": {
                  "items": {
                    "$ref": "#/definitions/Node"
                  },
                  "type": "array"
                },
                "nodesOnNextPage": {
                  "items": {
                    "$ref": "#/definitions/Node"
                  },
                  "type": "array"
                },
                "previousNodesOnPage": {
                  "items": {
                    "$ref": "#/definitions/Node"
                  },
                  "type": "array"
                }
              },
              "required": [
                "currentNode",
                "followingNodesOnPage",
                "nodesOnNextPage",
                "previousNodesOnPage"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "pageMargins": {
          "$ref": "#/definitions/Margins",
          "description": "Margins around the  {@link  content }  on each page.\n\nIf a  {@link  header }  or  {@link  footer }  is specified, the page margins must leave sufficient room for it to be rendered at all.\n\nDefaults to `40`."
        },
        "pageOrientation": {
          "$ref": "#/definitions/PageOrientation",
          "description": "Orientation of the document's pages.\n\nDefaults to `portrait` for standard page sizes; if a custom  {@link  pageSize }  is given, it defaults to the orientation set through its width and height."
        },
        "pageSize": {
          "$ref": "#/definitions/PageSize",
          "description": "Size of the document's pages.\n\nDefaults to `A4`."
        },
        "patterns": {
          "additionalProperties": {
            "$ref": "#/definitions/Pattern"
          },
          "description": "Dictionary of reusable pattern definitions that can be referenced by their key.",
          "type": "object"
        },
        "permissions": {
          "$ref": "#/definitions/PDFKit.DocumentPermissions",
          "description": "Permissions for accessing or modifying the document in different ways.\n\nThe PDF file cannot enforce these permissions by itself. It relies on PDF viewer applications to respect them.\n\nOnly relevant if  {@link  ownerPassword }  is set.\n\nDefaults to `{}` (everything is forbidden)"
        },
        "styles": {
          "$ref": "#/definitions/StyleDictionary",
          "description": "Dictionary for reusable styles to be referenced by their key throughout the document.\n\nTo define styles that should apply by default, use  {@link  defaultStyles  }  instead."
        },
        "userPassword": {
          "description": "Password required to open the document.\n\nIf set, the document is encrypted. Setting the  {@link  version }  influences the encryption method used.\n\nAn empty string is treated as \"no password\".",
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/PDFVersion",
          "description": "Version of the PDF specification the document is created with.\n\nInfluences the encryption method used in combination with  {@link  userPassword } . The PDF content is always created with version 1.3.\n\nDefaults to `1.3`."
        },
        "watermark": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Watermark"
            }
          ],
          "description": "Watermark that is rendered on top of each page."
        }
      },
      "required": [
        "content"
      ],
      "type": "object"
    },
    "TDocumentInformation": {
      "additionalProperties": false,
      "description": "Metadata to embed into the document.",
      "properties": {
        "author": {
          "description": "Name of the author.",
          "type": "string"
        },
        "creationDate": {
          "description": "Date the document was created.\n\nDefaults to the current date and time.",
          "format": "date-time",
          "type": "string"
        },
        "creator": {
          "description": "Name of the creator.\n\nDefaults to `pdfmake`.",
          "type": "string"
        },
        "keywords": {
          "description": "Keywords associated with the document.\n\nA PDF file stores all keywords as a single string, as given here. For optimal compatibility, separate keywords using commas or spaces.",
          "type": "string"
        },
        "modDate": {
          "description": "Date the document was last modified.",
          "format": "date-time",
          "type": "string"
        },
        "producer": {
          "description": "Name of the producer.\n\nDefaults to `pdfmake`.",
          "type": "string"
        },
        "subject": {
          "description": "Subject of the document.",
          "type": "string"
        },
        "title": {
          "description": "Document title.",
          "type": "string"
        },
        "trapped": {
          "description": "Indicates whether the document has been corrected for color misregistrations.",
          "enum": [
            "True",
            "False",
            "Unknown"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Table": {
      "additionalProperties": false,
      "description": "A table.",
      "properties": {
        "body": {
          "description": "Two-dimensional array that defines the table's rows and their cells.\n\nGiven a row and column number (both starting from 0), each cell is addressed as `body[rowIndex][columnIndex]`.",
          "items": {
            "items": {
              "$ref": "#/definitions/TableCell"
            },
            "type": "array"
          },
          "type": "array"
        },
        "dontBreakRows": {
          "description": "Controls whether the contents of a table row should be kept together on the same page.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "headerRows": {
          "description": "Number of rows from the top that make up the table's header.\n\nIf the table spans across multiple pages, the header is repeated on every page.\n\nDefaults to `0`.",
          "type": "number"
        },
        "heights": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "const": "auto",
              "type": "string"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "const": "auto",
                    "type": "string"
                  }
                ]
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/DynamicRowSize"
            }
          ],
          "description": "Row heights of the table.\n- A number sets an absolute height in `pt` for every row.\n- `auto` sets the heights based on the content.\n- Use an array or a callback function to control the height of each row individually.\n\nThe given values are ignored for rows whose content is higher.\n\nDefaults to `auto`."
        },
        "keepWithHeaderRows": {
          "description": "Number of rows after the given  {@link  headerRows }  that should be kept together with the header rows, without a page break in between.\n\nDefaults to `0`.",
          "type": "number"
        },
        "widths": {
          "anyOf": [
            {
              "const": "*",
              "type": "string"
            },
            {
              "const": "auto",
              "type": "string"
            },
            {
              "items": {
                "$ref": "#/definitions/Size"
              },
              "type": "array"
            }
          ],
          "description": "Column widths of the table.\n- `*` distributes the width equally, filling the whole available space.\n- `auto` sets the widths based on the content, filling only the necessary space.\n- Use an array to control the width of each column individually.   The array must contain widths for all columns.\n\nA column width smaller than a cell's content will break the text into multiple lines.\n\nDefaults to `auto`."
        }
      },
      "required": [
        "body"
      ],
      "type": "object"
    },
    "TableCell": {
      "anyOf": [
        {
          "additionalProperties": false,
          "type": "object"
        },
        {
          "properties": {
            "border": {
              "description": "Controls on which sides the cell has borders.\n\nTuple order: `[left, top, right, bottom]`\n\nDefaults to `[true, true, true, true]`.",
              "items": {
                "type": "boolean"
              },
              "maxItems": 4,
              "minItems": 4,
              "type": "array"
            },
            "borderColor": {
              "description": "Color of the border on each side of the cell.\n\nTuple order: `[left, top, right, bottom]`\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to the border color defined by the given table layout, or `black` on all sides.",
              "items": {
                "type": "string"
              },
              "maxItems": 4,
              "minItems": 4,
              "type": "array"
            },
            "colSpan": {
              "description": "Number of columns the cell spans.\n\nCells covered by this cell still need to be declared. They should be filled with an empty object placeholder (`{}`).\n\nDefaults to `1`.",
              "type": "number"
            },
            "overlayOpacity": {
              "description": "Opacity of the given  {@link  overlayPattern } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `1`.",
              "type": [
                "number",
                "null"
              ]
            },
            "overlayPattern": {
              "$ref": "#/definitions/PatternFill",
              "description": "Overlays the cell with the given pattern."
            },
            "rowSpan": {
              "description": "Number of rows the cell spans.\n\nCells covered by this cell still need to be declared. They should be filled with an empty object placeholder (`{}`).\n\nDefaults to `1`.",
              "type": "number"
            }
          },
          "type": "object"
        }
      ],
      "description": "A cell of a  {@link  Table } .\n- Can be any valid content. Content objects provide additional properties to control   the cell's appearance.\n- Use empty objects (`{}`) as placeholders for cells that are covered by other cells   spanning multiple rows or columns."
    },
    "TableLayout": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/PredefinedTableLayout"
        },
        {
          "$ref": "#/definitions/CustomTableLayout"
        }
      ],
      "description": "A table layout.\n\nAvailable options are:\n- the name of a built-in predefined table layout\n- the name of a global custom table layout\n- a custom table layout object"
    },
    "TableOfContent": {
      "additionalProperties": false,
      "description": "Table of contents.\n\nOne document may contain more than one table of contents. In this case, you should assign each additional table of contents a unique `id`. This allows you to add items to it using the  {@link  ContentTocItem.tocItem }  property.",
      "properties": {
        "id": {
          "description": "ID to differentiate multiple tables of contents:\n- Without an ID set, a table of content contains all items setting    {@link  ContentTocItem.tocItem }  to `true`\n- With an ID set, a table of content contains all items setting    {@link  ContentTocItem.tocItem }  to its ID",
          "type": "string"
        },
        "numberStyle": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply to the page numbers.\n\nCan be overridden per item using  {@link  ContentTocItem.tocNumberStyle } ."
        },
        "textMargin": {
          "$ref": "#/definitions/Margins",
          "description": "Margin around each item in `pt`.\n\nCan be overridden per item using  {@link  ContentTocItem.tocMargin } .\n\nDefaults to `0`."
        },
        "textStyle": {
          "$ref": "#/definitions/StyleReference",
          "description": "Style or style reference to apply to each item.\n\nCan be overridden per item using  {@link  ContentTocItem.tocStyle } ."
        },
        "title": {
          "$ref": "#/definitions/Content",
          "description": "Title displayed at the top of the table of contents."
        }
      },
      "type": "object"
    },
    "UnorderedListElement": {
      "description": "Item of a  {@link  ContentUnorderedList } .",
      "properties": {
        "listType": {
          "$ref": "#/definitions/UnorderedListType",
          "description": "Overrides the list marker type for this list item.\n\nDefaults to the list's  {@link  ContentUnorderedList.type } ."
        }
      },
      "type": "object"
    },
    "UnorderedListType": {
      "description": "List marker type of a  {@link  ContentUnorderedList } :\n- `disc`: a solid circle\n- `square`: a solid square\n- `circle`: an outlined circle\n- `none`: no marker",
      "enum": [
        "disc",
        "square",
        "circle",
        "none"
      ],
      "type": "string"
    },
    "VerticalDynamicCellLayout<string>": {
      "$comment": "(\n    columnIndex: number,\n    node: ContentTable,\n    rowIndex: number) => T | null",
      "description": "Callback to control a property of the  {@link  CustomTableLayout }  depending on the column and row number, both starting from 0.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "columnIndex": {
              "type": "number"
            },
            "node": {
              "$ref": "#/definitions/ContentTable"
            },
            "rowIndex": {
              "type": "number"
            }
          },
          "required": [
            "columnIndex",
            "node",
            "rowIndex"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "VerticalDynamicLayout<LineStyle>": {
      "$comment": "(columnIndex: number, node: ContentTable) => T | null",
      "description": "Callback to control a property of the  {@link  CustomTableLayout }  depending on the column number, starting from 0.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "columnIndex": {
              "type": "number"
            },
            "node": {
              "$ref": "#/definitions/ContentTable"
            }
          },
          "required": [
            "columnIndex",
            "node"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "VerticalDynamicLayout<number>": {
      "$comment": "(columnIndex: number, node: ContentTable) => T | null",
      "description": "Callback to control a property of the  {@link  CustomTableLayout }  depending on the column number, starting from 0.",
      "properties": {
        "namedArgs": {
          "additionalProperties": false,
          "properties": {
            "columnIndex": {
              "type": "number"
            },
            "node": {
              "$ref": "#/definitions/ContentTable"
            }
          },
          "required": [
            "columnIndex",
            "node"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "Watermark": {
      "additionalProperties": false,
      "description": "Watermark that is rendered on top of each page.",
      "properties": {
        "angle": {
          "description": "Clock-wise rotation angle of the  {@link  text } , with `0` being normal text from left to right, and `90` being vertical text from top to bottom.\n\nDefaults to an angle from the bottom left to the top right depending on the page size (~ `305` for A4).",
          "type": "number"
        },
        "bold": {
          "description": "Controls whether the  {@link  text }  is bold.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "color": {
          "description": "Color of the  {@link  text } .\n\nSupports well-known color names like `blue` or hexadecimal color strings like `#ccffcc`.\n\nDefaults to `black`.",
          "type": "string"
        },
        "font": {
          "description": "Name of the font.\n\nOnly built-in and globally declared fonts are available, regardless of the fonts installed on the system.\n\nDefaults to `Roboto`.",
          "type": "string"
        },
        "fontSize": {
          "description": "Font size in `pt`.\n\nDefaults to a heuristic depending on the length of  {@link  text }  to cover most of the page.",
          "type": "number"
        },
        "italics": {
          "description": "Controls whether the  {@link  text }  is italic.\n\nDefaults to `false`.",
          "type": "boolean"
        },
        "opacity": {
          "description": "Opacity of the  {@link  text } . Must be between 0 (fully transparent) and 1 (fully opaque).\n\nDefaults to `0.6`.",
          "type": "number"
        },
        "text": {
          "description": "Text of the watermark.",
          "type": "string"
        }
      },
      "required": [
        "text"
      ],
      "type": "object"
    }
  }
}